#include <iostream>
#include <vector>

using namespace std;

void insertionSort(vector<int>& a, int left, int right)
{
    for( int i = left; i < right; ++i )
    {
        int tmp = a[i];
        int j = i - 1;
        for( ; j >= 0 && tmp < a[j]; --j )
        {
            a[j + 1] = a[j];
        }
        a[j + 1] = tmp;
    }
}

int M_pivot(vector<int> &a, int l, int r)
{
    int m = l + (r - l) / 2;
    if (a[m] < a[l])
    {
        if (a[l] < a[r])
            return l;
        return (a[r] < a[m]) ? m : r;
    }
    if (a[m] < a[r])
        return m;
    return (a[r] < a[l]) ? l : r;
}

int partition(vector<int> &a, int l, int r)
{
    swap(a[M_pivot(a, l, r)], a[r]);
    int i = l, j = l;
    while(j < r)
    {
        if(a[j] <= a[r])
        {
            swap(a[i], a[j]);
            ++i;
        }
        ++j;
    }
    swap(a[r], a[i]);

    return i;
}

void _quickSort(vector<int> &a, int l, int r)
{
    if (l + 32 < r)
    {
       int p = partition(a, l, r);
       _quickSort(a, l, p - 1);
       _quickSort(a, p + 1, r);
    }
}

void optSort(vector<int> &a, int l, int r)
{
    _quickSort(a, l, r);
    insertionSort(a, l, r + 1);
}

//bool read(int& out)
//{
//    int c;
//    int x = 0;

//    while ((c = getchar()) != EOF && ('0' < c || c > '9'));

//    if (c == EOF)
//        return false;
//    for (; '0' <= c and c <= '9' ; c = getchar())
//        x = x * 10 + c - '0';

//    out = x;
//    return true;
//}

bool read(int& out)
{
    int c = getchar();
        int x = 0;

        for (; !('0'<=c and c<='9'); c = getchar())
        {
            if (c == EOF)
                return false;
        }

        if (c == EOF)
            return false;
        for (; '0' <= c and c <= '9' ; c = getchar())
        {
            x = x*10 + c - '0';
        }
        out = x;
        return true;
}

int main()
{
    vector<int> v;
    v.reserve(25000000);

    int tmp;

    while(read(tmp))
        v.push_back(tmp);

    int n = v.size();

    optSort(v, 0, n - 1);

    for (int i = 9; i < n; i += 10)
        cout << v[i] << ' ';

    return 0;
}
